# vim:spl=de_20,en spell
Kurzeinführung Go
16 Feb 2017

Alexander Neumann (fd0)
alexander@bumpern.de
https://github.com/fd0/talk-intro-go

* 

.image https://raw.githubusercontent.com/shalakhin/gophericons/master/png/0.png _ 400
.caption _Gopher_ by [[http://www.reneefrench.com][Renée French]] ([[http://creativecommons.org/licenses/by/3.0/][CC BY 3.0]])

* Über mich

- Go seit 2012
- Projekt: restic (Backupprogramm, schnell, sicher, effizient)
- https://restic.github.io

* Über euch

* Fundament

- Statische Typisierung
- Garbage Collection
- Typsicherheit (type-safe)
- Speichersicherheit (memory-safe)
- Nebeläufigkeit (concurrency)
- Kommunikation
- Schnelles Kompilieren
- "fun"

* Designziele

- Wenige, orthogonale Features
- Wenige Keywords (Reguläre, konfliktfreie Grammatik)
- Einfach zu parsen (Parser in der stdlib)
- Typsicherheit
- Keine Typenhierarchie, keine Vererbung

* Grundlagen

- Einfache, prägnante Syntax
- Leichtgewichtiges Typsystem
- Keine impliziten Umwandlungen von Typen (int -> int64)
- Typenlose Konstanten
- Strikte Trennung zwischen Interface und Implementierung
- Implizite Interfaces
- Keine Makefiles, Code enthält Information zum Kompilieren
- Einfaches Kompilieren für andere Architekturen

* Tooling
- Kompilieren: go build
- Direkt ausführen: go run
- Sourcecode formatieren: gofmt

- go vet
- golint
- gorename
- [...]

* Achtung

Suchen nach "golang", nicht "go"

.image https://raw.githubusercontent.com/shalakhin/gophericons/master/png/8.png _ 400
.caption _gophericons_ by [[https://www.facebook.com/olga.shalakhina][Olga Shalakhina]] ([[http://creativecommons.org/licenses/by/3.0/][CC BY 3.0]])

* Runtime

- Kümmert sich um alles
- Stack
- Goroutines, System-Threads
- Kommunikation (Channel)
- Eingebaute Datentypen (Slices, Maps)

* Standardbibliothek

- Enthält schon sehr viel
- HTTP-Server, HTTP-Client
- Crypto, Hashfunktionen
- Testing-Framework
- HTML, Templates
- Go Parser
- Math/bignum
- RPC
- zip/tar/gzip/zlib/...

* Packages

- Go-Code ist aufgeteilt in Pakete
- Ein Paket ist ein Verzeichnis mit Code
- Export durch Großbuchstaben
- Explizite Dependencies

.image https://raw.githubusercontent.com/shalakhin/gophericons/master/png/15.png 360 _

* Basics

- Ähnlich zu C, nur Typ/Name vertauscht
- Nur noch ein Schleifenkonstrukt
- Keine Pointer-Arithmetik
- Alle Variablen/Pakete müssen verwendet werden (`-Werror`)
- Coding-Style ist was `gofmt` ausgibt
- `CamelCase` statt `snake_case` für Namen

* Hello World!

.play -edit vortragsdemos/hello-world/main.go

Ausführen:

  $ go run main.go
  Hello World

Kompilieren:

  $ go build -o hello main.go
  $ ./hello
  Hello World

* Klammern, if, for

.play -edit vortragsdemos/if-for/main.go /^func main/,/^}/

* Doppelzuweisung, Semikolons

.play -edit vortragsdemos/semicolons-double-assign/main.go

* Variablen und Konstanten

.play -edit vortragsdemos/var-const/main.go /START OMIT/,/END OMIT/

.play -edit vortragsdemos/unsized-constants/main.go /START OMIT/,/END OMIT/

* Automatische Typableitung

.play -edit vortragsdemos/var-declaration/main.go

* Funktionen

.play -edit vortragsdemos/funcs/main.go

* main(), init()

.play -edit vortragsdemos/main-init/main.go

* Mehrfachrückgabe, Fehler

.play -edit vortragsdemos/funcs2/main.go /START OMIT/,/END OMIT/

* Type und Struct

.play -edit vortragsdemos/type-struct1/main.go /START OMIT/,/END OMIT/

* Methoden

.play -edit vortragsdemos/methods/main.go /START OMIT/,/END OMIT/

* Pointer

.play -edit vortragsdemos/pointer/main.go /START OMIT/,/END OMIT/

* godoc

  $ godoc -http 127.0.0.1:6060

[[http://localhost:6060/pkg][godoc Webserver]]
[[http://localhost:6060/pkg/fmt/#Stringer][interface fmt.Stringer]]

* godoc #2

  $ godoc fmt Println

  func Println(a ...interface{}) (n int, err error)

    Println formats using the default formats for its operands and writes to
    standard output. Spaces are always added between operands and a newline
    is appended. It returns the number of bytes written and any write error
    encountered.

Alternativ:

  $ go doc fmt.stringer

* Interfaces

  package fmt

  // Stringer is implemented by any value that has a String method,
  // which defines the ``native'' format for that value.
  // The String method is used to print values passed as an operand
  // to any format that accepts a string or to an unformatted printer
  // such as Print.
  type Stringer interface {
      String() string
  }


* Interfaces #2

.play -edit vortragsdemos/interfaces/main.go /START Color OMIT/,/END Color OMIT/

.play -edit vortragsdemos/interfaces/main.go /START main OMIT/,/END main OMIT/

* Closures

.play -edit vortragsdemos/closures/main.go /START OMIT/,/END OMIT/

* Native Datenstrukturen

- Array
- Slice ("Arrays mit variabler Länge")
- Maps ("Dictionary", "Hash")
- Channel

.image https://raw.githubusercontent.com/shalakhin/gophericons/master/png/11.png _ 300

* Native Datenstrukturen: Array

.play -edit vortragsdemos/arrays/main.go /START OMIT/,/END OMIT/

Eher selten verwendet

* Native Datenstrukturen: Slice

.play -edit vortragsdemos/slices/main.go /START OMIT/,/END OMIT/

Achtung: Call-by-reference (für unterliegende Daten)

* Native Datenstrukturen: Map

.play -edit vortragsdemos/maps/main.go /START OMIT/,/END OMIT/

* Nebenläufigkeit in Go

.play -edit vortragsdemos/concurrency/main.go /START OMIT/,/END OMIT/

.image https://raw.githubusercontent.com/shalakhin/gophericons/master/png/2.png _ 300

Wird eine Funktion mit dem Keyword `go` gestartet, läuft sie in einer eigenen Goroutine.

* Native Datenstrukturen: Channel

.play -edit vortragsdemos/channels/main.go /START OMIT/,/END OMIT/

* Nebenläufigkeit #2

.play -edit vortragsdemos/concurrency2/main.go /START OMIT/,/END OMIT/

* Nebenläufigkeit #3

.play -edit vortragsdemos/concurrency3/main.go /START main OMIT/,/END main OMIT/

* Nebenläufigkeit #3

.play -edit vortragsdemos/concurrency3/main.go /START worker OMIT/,/END worker OMIT/

* Demo

* Weiterführendes

- Alan A. A. Donovan · Brian W. Kernighan - The Go Programming Language
      http://www.gopl.io/
- Brian Ketelsen, Erik St. Martin, William Kennedy - Go in Action
      http://goinactionbook.com/

- Caleb Doxsey - An Introduction to Programming in Go [free]
      https://www.golang-book.com/books/intro
      https://www.golang-book.com/public/pdf/gobook.0.pdf

- An (interactive) Tour of Go: https://golang.org/tour


#vim:ft=votl noet ts=4 nolist
